---
title: "Adding in more data"
author: "Christopher Hughes"
format: html
---

## Details

This document describes adding more information to our RNAseq results.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('ggplot2')
library('RColorBrewer')
library('Seurat')
library('ggrepel')
```

I want to set a base directory that we can use as a link to the directory where we will do most of the work. I use two directories here because the Workspace is what is pushed to GitHub and contains scripts and plot files, but the Repository is where more of the big data is stored that does not get pushed.

```{r}
##########################################################################################
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToEwsCrisprManuscript'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToEwsCrisprManuscript'
```

## Data processing

Add in information about RNA expression regulation, including CCLE specificity.

```{r}
###########################################################
##sole data
sole = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/soleInducedEwsRnaSeq/datasetOutputs/dataset_deseq2_mscAndMpcDeData.rds', sep = '')) %>%
  dplyr::select(symbol, msc_log2FoldChange, mpc_log2FoldChange) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::rename(mscFc = 'msc_log2FoldChange',
                mpcFc = 'mpc_log2FoldChange')

##ccle specificity
ccle = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/ccleDepMapRnaseq/datasetOutputs/dataset_rnaAndProteinSpecificityScores.rds', sep = '')) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::rename(ewsRnaSpecificity = 'ewsRnaScore',
                ewsProSpecificity = 'ewsProScore')
```

Add in information about GGAA sites in proximity and their regulation.

```{r}
###########################################################
##read in the msat data and calculate some metrics
closestGgaa = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenFindingGgaaRepeats/datasetOutputs/dataset_msatsImprovedAssignment.rds',sep='')) %>%
  dplyr::select(symbol, msat_name, copyNumber) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::mutate(msatCount = 1) %>%
  dplyr::group_by(symbol) %>%
  dplyr::summarise(msatCount = sum(msatCount, na.rm = TRUE), 
                   msatCopyNumber = max(copyNumber, na.rm = TRUE)) %>%
  dplyr::ungroup()

##read in the GGAA regulation data
ggaaReg = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/takGgaaTargetingRnaSeq/datasetOutputs/dataset_deseq2_a673_gfp-a673_krab.rds',sep='')) %>%
  dplyr::mutate(ensg = rownames(.)) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::select(symbol, ensg, log2FoldChange, padj) %>%
  dplyr::rename(ggaaFc = 'log2FoldChange',
                ggaaPadj = 'padj')
```

Get information about FLI1 peaks from ChIP data.

```{r}
##read in the peak data and calculate some metrics
fli1Peaks = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/aynaudChipSeq/datasetOutputs/dataset_SRR8832674ImprovedAssignment.rds',sep='')) %>%
  dplyr::select(symbol, peak_name) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::mutate(fli1PeakCount = 1) %>%
  dplyr::group_by(symbol) %>%
  dplyr::summarise(fli1PeakCount = sum(fli1PeakCount, na.rm = TRUE)) %>%
  dplyr::ungroup()
```

Get the proteomics data.

```{r}
###########################################################
##read in the DIA data
dia = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673ProteomicsDia/datasetOutputs/dataset_deqmsMbr_day0-day7.rds',sep='')) %>%
  dplyr::select(symbol, AveExpr, logFC, adj.P.Val) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::rename(diaExpr = 'AveExpr',
                diaFc = 'logFC',
                diaPadj = 'adj.P.Val')

##read in the DDA data
dda = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673Proteomics/datasetOutputs/dataset_deqms_day0-day7.rds',sep='')) %>%
  dplyr::select(symbol, AveExpr, logFC, adj.P.Val) %>%
  dplyr::rename(ddaExpr = 'AveExpr',
                ddaFc = 'logFC',
                ddaPadj = 'adj.P.Val')
```

Get the DepMap dependency data.

```{r}
###########################################################
##get the depmap data we parsed earlier
depData = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/ccleDepMapCrispr/dataset_depmapDependencyEwingOnly.rds', sep = '')) %>%
  dplyr::select(-nCellLines) %>%
  dplyr::filter(!is.na(symbol))
```

Get the surface proteomics data.

```{r}
###########################################################
##get the surface proteomics data
surfaceData = readRDS(paste(baseRepository,'/defineCandidatesExpressionData/sorensenSurfaceData/datasetOutputs/dataset_surfaceProteinRanks.rds',sep='')) %>%
  dplyr::filter(!is.na(symbol))
```

Get the EwS patient data.

```{r}
###########################################################
##get the EwS patient cohort data
patientData = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsPatientData/datasetOutputs/dataset_tpmMedianExpression.rds', sep = ''))
```

Combine these with the RNA data.

```{r}
###########################################################
##combine with the RNA data
rna = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_day0vs7EwsRegulationAssignments.rds', sep = '')) %>%
  dplyr::left_join(sole) %>%
  dplyr::left_join(patientData) %>%
  dplyr::left_join(dda) %>%
  dplyr::left_join(dia) %>%
  dplyr::left_join(ccle) %>%
  dplyr::left_join(fli1Peaks) %>%
  dplyr::left_join(closestGgaa) %>%
  dplyr::left_join(ggaaReg) %>%
  dplyr::left_join(depData) %>%
  dplyr::left_join(surfaceData)
```

Define a score that allows us to narrow down hits of interest. This score is based on somewhat subjective cutoff criteria, and thus is open to modification. I am going to focus on induced genes as these would be the most ideal for targeting in a CRISPR screen.

```{r}
###########################################################
##define an ews score in the rna table
rnaScored = rna %>%
  dplyr::mutate(isPro = rowMeans(pick(ddaFc,diaFc),na.rm = TRUE),
                fli1PeakCount = ifelse(is.na(fli1PeakCount), 0, fli1PeakCount),
                msatCount = ifelse(is.na(msatCount), 0, msatCount)) %>%
  dplyr::mutate(log2FoldChangeScore = ifelse(log2FoldChange >= 1, 1, 0),
                mscFcScore = ifelse(mscFc >= 1, 1, 0),
                mpcFcScore = ifelse(mpcFc >= 1, 1, 0),
                ewsTumourMedianTpmScore = ifelse(ewsTumourMedianTpm >= median(patientData$ewsTumourMedianTpm), 1, 0),
                ewsRnaSpecificityScore = ifelse(ewsRnaSpecificity >= 1, 1, 0),
                isProScore = ifelse(isPro >= 1, 1, 0),
                fli1PeakCountScore = ifelse(fli1PeakCount >= 1, 1, 0),
                msatCountScore = ifelse(msatCount >= 1, 1, 0),
                ggaaFcScore = ifelse(ggaaFc >= 1, 1, 0)) %>%
  dplyr::mutate(ewsSumScore = rowSums(pick(log2FoldChangeScore:ggaaFcScore), na.rm = TRUE)) %>%
  dplyr::arrange(-ewsSumScore)

##save these data
saveRDS(rnaScored, paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsThresholdScore.rds',sep=''))
write.table(rnaScored, paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsThresholdScore.tsv',sep=''),
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')
```

Look through these data to calculate some basic metrics.

```{r}
###########################################################
##regulation status
table(rnaScored$ewsRnaRegulate)

##ggaa regulation
ggaaReg = dplyr::filter(rnaScored, abs(ggaaFc) >= 1 & ggaaPadj <= 0.01)
table(ggaaReg$ewsRnaRegulate)

##fli1 peaks
fliPeaks = dplyr::filter(rnaScored, fli1PeakCount > 0)
table(fliPeaks$ewsRnaRegulate)

##ccle rna
summary(rnaScored$ewsRnaSpecificity)

##tiers
table(rnaScored$ewsSumScore)


```

What if we change this score to something that isn't 'tier' based. We can use the rank for each metric to calculate a score rather than using a more subjective cutoff. 

```{r}
###########################################################
##this first processing is for induced hits
rnaScored = rna %>%
  dplyr::mutate(isPro = rowMeans(pick(ddaFc,diaFc),na.rm = TRUE),
                fli1PeakCount = ifelse(is.na(fli1PeakCount), 0, fli1PeakCount),
                msatCount = ifelse(is.na(msatCount), 0, msatCount)) %>%
  dplyr::arrange(-log2FoldChange) %>%
  dplyr::mutate(log2FoldChangeRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(log2FoldChangeRank = ifelse(is.na(log2FoldChange), 0, log2FoldChangeRank)) %>%
  dplyr::arrange(-mscFc) %>%
  dplyr::mutate(mscFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(mscFcRank = ifelse(is.na(mscFc), 0, mscFcRank)) %>%
  dplyr::arrange(-mpcFc) %>%
  dplyr::mutate(mpcFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(mpcFcRank = ifelse(is.na(mpcFc), 0, mpcFcRank)) %>%
  dplyr::arrange(-ewsTumourMedianTpm) %>%
  dplyr::mutate(ewsTumourMedianTpmRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ewsTumourMedianTpmRank = ifelse(is.na(ewsTumourMedianTpm), 0, ewsTumourMedianTpmRank)) %>%
  dplyr::arrange(-ddaFc) %>%
  dplyr::mutate(ddaFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ddaFcRank = ifelse(is.na(ddaFc), 0, ddaFcRank)) %>%
  dplyr::arrange(-diaFc) %>%
  dplyr::mutate(diaFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(diaFcRank = ifelse(is.na(diaFc), 0, diaFcRank)) %>%
  dplyr::arrange(-ewsRnaSpecificity) %>%
  dplyr::mutate(ewsRnaSpecificityRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ewsRnaSpecificityRank = ifelse(is.na(ewsRnaSpecificity), 0, ewsRnaSpecificityRank)) %>%
  dplyr::arrange(-ggaaFc) %>%
  dplyr::mutate(ggaaFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ggaaFcRank = ifelse(is.na(ggaaFc), 0, ggaaFcRank)) %>%
  dplyr::rowwise() %>%
  dplyr::mutate(ewsRankScore = median(c(log2FoldChangeRank,
                                   mscFcRank,
                                   mpcFcRank,
                                   ewsTumourMedianTpmRank,
                                   ddaFcRank,
                                   diaFcRank,
                                   ewsRnaSpecificityRank,
                                   ggaaFcRank))/1e3) %>%
  dplyr::mutate(fli1PeakCountScore = ifelse(fli1PeakCount >= 1, 1, 0),
                msatCountScore = ifelse(msatCount >= 1, 1, 0)) %>%
  dplyr::mutate(ewsRankScoreDirect = ewsRankScore + fli1PeakCountScore + msatCountScore) %>%
  dplyr::arrange(-ewsRankScoreDirect)


##save these data
saveRDS(rnaScored, paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsInducedRankScore.rds',sep=''))
write.table(rnaScored, paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsInducedRankScore.tsv',sep=''),
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')


###########################################################
##now we can do reduced hits
rnaScored = rna %>%
  dplyr::mutate(isPro = rowMeans(pick(ddaFc,diaFc),na.rm = TRUE),
                fli1PeakCount = ifelse(is.na(fli1PeakCount), 0, fli1PeakCount),
                msatCount = ifelse(is.na(msatCount), 0, msatCount)) %>%
  dplyr::arrange(log2FoldChange) %>%
  dplyr::mutate(log2FoldChangeRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(log2FoldChangeRank = ifelse(is.na(log2FoldChange), 0, log2FoldChangeRank)) %>%
  dplyr::arrange(mscFc) %>%
  dplyr::mutate(mscFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(mscFcRank = ifelse(is.na(mscFc), 0, mscFcRank)) %>%
  dplyr::arrange(mpcFc) %>%
  dplyr::mutate(mpcFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(mpcFcRank = ifelse(is.na(mpcFc), 0, mpcFcRank)) %>%
  dplyr::arrange(ewsTumourMedianTpm) %>%
  dplyr::mutate(ewsTumourMedianTpmRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ewsTumourMedianTpmRank = ifelse(is.na(ewsTumourMedianTpm), 0, ewsTumourMedianTpmRank)) %>%
  dplyr::arrange(ddaFc) %>%
  dplyr::mutate(ddaFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ddaFcRank = ifelse(is.na(ddaFc), 0, ddaFcRank)) %>%
  dplyr::arrange(diaFc) %>%
  dplyr::mutate(diaFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(diaFcRank = ifelse(is.na(diaFc), 0, diaFcRank)) %>%
  dplyr::arrange(ewsRnaSpecificity) %>%
  dplyr::mutate(ewsRnaSpecificityRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ewsRnaSpecificityRank = ifelse(is.na(ewsRnaSpecificity), 0, ewsRnaSpecificityRank)) %>%
  dplyr::arrange(ggaaFc) %>%
  dplyr::mutate(ggaaFcRank = seq(nrow(.),1,-1)) %>%
  dplyr::mutate(ggaaFcRank = ifelse(is.na(ggaaFc), 0, ggaaFcRank)) %>%
  dplyr::rowwise() %>%
  dplyr::mutate(ewsRankScore = median(c(log2FoldChangeRank,
                                   mscFcRank,
                                   mpcFcRank,
                                   ewsTumourMedianTpmRank,
                                   ddaFcRank,
                                   diaFcRank,
                                   ewsRnaSpecificityRank,
                                   ggaaFcRank))/1e3) %>%
  dplyr::mutate(fli1PeakCountScore = ifelse(fli1PeakCount >= 1, 1, 0),
                msatCountScore = ifelse(msatCount >= 1, 1, 0)) %>%
  dplyr::mutate(ewsRankScoreDirect = ewsRankScore + fli1PeakCountScore + msatCountScore) %>%
  dplyr::arrange(-ewsRankScoreDirect)


##save these data
saveRDS(rnaScored, paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsReducedRankScore.rds',sep=''))
write.table(rnaScored, paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsReducedRankScore.tsv',sep=''),
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')
```

I think this rank based score is much nicer. It makes it so things are penalized too heavily if they have a missing value (e.g. dropping a tier because they are missing 1 thing). It is weighted fairly heavily towards 'direct' hits, things that have a FLI1 peak or a GGAA mSat, but I am OK with this for now as direct hits are what we are most interested in. What does this look like on a plot? May a good plot is to have low and high rank hits on the same plot, almost like a volcano. Maybe we just take the top 1000 ranked in either direction and then label the top 30 on either side (negative ranks for repressed hits, positive ranks for induced hits, just so they spread like a volcano). 

```{r}
###########################################################
##make a new data frame of just the induced hits that we want
ind = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsInducedRankScore.rds',sep='')) %>%
  dplyr::select(symbol, ewsRankScoreDirect) %>%
  dplyr::mutate(dataset = 'induced')
ewsHits = ind[1:30,]
ewsHits$rank = seq(1,30,1)

##make the plot
ggplot(ewsHits, aes(ewsRankScoreDirect, -rank)) +
  geom_point(size = 1, color = brewer.pal(4,'OrRd')[4]) +
  labs(x = 'EwS score', y = 'Rank', title = 'EwS induced') +
  scale_x_continuous(limits = c(17.25, 17.45), breaks = seq(17,18,0.05)) +
  geom_text_repel(label = ewsHits$symbol, nudge_x = 0.02, max.overlaps = 100, min.segment.length = unit(0, 'lines'), size = 1, segment.size = 0.25) +
  theme_classic() +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank())
ggsave(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/plots/scatter_ewsInducedHits.pdf', sep = ''),
         height = 2, width = 2, useDingbats = FALSE)



##now for the repressed hits
#
rep = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsReducedRankScore.rds',sep='')) %>%
  dplyr::select(symbol, ewsRankScoreDirect) %>%
  dplyr::mutate(dataset = 'repressed')
ewsHits = rep[1:30,]
ewsHits$rank = seq(1,30,1)

##make the plot
ggplot(ewsHits, aes(ewsRankScoreDirect, -rank)) +
  geom_point(size = 1, color = brewer.pal(4,'GnBu')[4]) +
  labs(x = 'EwS score', y = 'Rank', title = 'EwS repressed') +
  scale_x_continuous(limits = c(16.95, 17.3), breaks = seq(16,18,0.05)) +
  geom_text_repel(label = ewsHits$symbol, nudge_x = 0.02, max.overlaps = 100, min.segment.length = unit(0, 'lines'), size = 1, segment.size = 0.25) +
  theme_classic() +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank())
ggsave(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/plots/scatter_ewsRepressedHits.pdf', sep = ''),
         height = 2, width = 2, useDingbats = FALSE)
```

I want to incorporate the IcEWS score from the Aynaud paper, specifically there info on 'direct' and 'indirect' hits.

```{r}
###########################################################
##get the aynaud data
aynaud = read_tsv(paste(generalDatasets, '/aynaudEwsGeneSignaturePmid32049009/aynaudEwsGeneSignatureSet.txt', sep = ''), show_col_types = FALSE)

##get our ranked data
ind = readRDS(paste(baseRepository, '/defineCandidatesExpressionData/sorensenEwsA673RnaSeq/datasetOutputs/dataset_ewsTargetsInducedRankScore.rds',sep='')) %>%
  dplyr::full_join(aynaud) %>%
  dplyr::rename(aynaudDirect = 'isDirect')
  

```

Finish up.

### Session info

```{r}
##########################################################################################
sessionInfo()
```











