---
title: "ChIPseq data processing"
author: "Christopher Hughes"
format: html
---

## Details

This document describes processing published ChIPseq data in order to monitor FLI1 signal around DLG2.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('ggplot2')
library('RColorBrewer')
library('wiggleplotr')
library('GenomicRanges')
library('GenomicFeatures')
library('biomaRt')
library('org.Hs.eg.db')
library('TxDb.Hsapiens.UCSC.hg38.knownGene')
```

I want to set a base directory that we can use as a link to the directory where we will do most of the work. I use two directories here because the Workspace is what is pushed to GitHub and contains scripts and plot files, but the Repository is where more of the big data is stored that does not get pushed.

```{r}
##########################################################################################
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToEwsCrisprManuscript'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToEwsCrisprManuscript'
```

## Data processing

First get the gtf file we used for alignment and will use for annotation below.

```{r}
###########################################################
##need to change your gtf dependent on what the code below is using. The ensembl code uses the 'genome.gtf' file.
totalGtf = as.data.frame(rtracklayer::import.gff('D:/databases/projectEwsDlg2/refseqFiles/GRCh38_latest_genomic.gtf.gz'))
#totalGtf = as.data.frame(rtracklayer::import.gff('D:/databases/projectEwsDlg2/baseGenomeFiles/genome.gtf'))
```

Pull out the data from the gtf for DLG2.

```{r}
###########################################################
##the transcript with the closest 'exon' is ENST00000426717.6
dlg2Gtf = totalGtf %>%
  filter(grepl('DLG2$', gene)) %>%
  filter(grepl('gene', type)) %>%
  mutate(end = end + 100000) #we add 100kb here to search beyond the annotated TSS

##pull out the DLG2 peaks from the day 17 peaks file using the info from the GTF
macsPeaks = read_tsv(paste(baseRepository, '/investigatingDlg2/aynaudChipSeq/macsOutput/SRR8832674_peaks.xls', sep = ''), 
                     skip = 30, show_col_types = FALSE,
                     col_names = c('chr','start','end','length','abs_summit','pileup','logPValue','fold_enrichment','logQValue','name')) %>%
  filter(grepl('chr11', chr)) %>%
  filter(start > dlg2Gtf$start & end < dlg2Gtf$end) %>%
  mutate(midPoint = start + round(length / 2, 0)) %>%
  filter(fold_enrichment >= 10)


##get the bigwig data
macsBw = rtracklayer::import(paste(baseRepository, '/investigatingDlg2/aynaudChipSeq/macsOutput/SRR8832674.chr11.bw', sep = ''))

##make a new grange to subtract from these data
peakGrange = makeGRangesFromDataFrame(data.frame('seqname' = macsPeaks$chr,
                        'start' = macsPeaks$midPoint - 1000,
                        'end' = macsPeaks$midPoint + 1000,
                        'strand' = '*'))

##find the overlaps with the bigwig data
peakWindows = unlist(slidingWindows(peakGrange,1), use.names = TRUE)
peakWindows$peak = rep(seq(5,1,-1), each = 2001)
macsOverlaps = findOverlaps(peakWindows, macsBw, ignore.strand = TRUE)
macsCounts = as.data.frame(macsBw)[subjectHits(macsOverlaps),]
macsCounts$peakId = peakWindows$peak
macsCounts$indexLocation = rep(seq(1,2001,1), 5)
```

Use this info to plot all of the DLG2 peaks in a single graph.

```{r}
##########################################################################################
#you need to run the code in the previous chunk before this because it relies on some of the objects from it
accessions = c('SRR8832669','SRR8832670','SRR8832671','SRR8832672','SRR8832673','SRR8832674')
combinedPeaks = list()
for(i in 1:length(accessions)){
  macsBw = rtracklayer::import(paste(baseRepository, '/investigatingDlg2/aynaudChipSeq/macsOutput/',accessions[i],'.chr11.bw', sep = ''))
  macsOverlaps = findOverlaps(peakWindows, macsBw, ignore.strand = TRUE)
  macsCounts = as.data.frame(macsBw)[subjectHits(macsOverlaps),]
  macsCounts$peakId = peakWindows$peak
  macsCounts$indexLocation = rep(seq(1,2001,1), 5)
  macsCounts$dataset = accessions[i]
  ##
  combinedPeaks[[i]] = macsCounts
}
combinedPeaksCollapse = do.call('rbind', combinedPeaks)


##make the plot
ggplot(combinedPeaksCollapse, aes(indexLocation, score)) +
  geom_path(color = brewer.pal(8,'RdBu')[8], linewidth = 1) +
  scale_y_continuous(limits = c(0,6), breaks = seq(0,8,2)) +
  scale_x_continuous(limits = c(0,2005), breaks = seq(0,2000,1000)) +
  labs(x = 'Peak position', y = 'Bins per million', title = 'EWS-FLI1 peaks in DLG2') +
  facet_wrap(~dataset + peakId, nrow = 6, ncol = 5) +
  theme_classic() +
  theme(panel.border = element_rect(linewidth = 1, fill = NA),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.text.x = element_blank())
ggsave(paste(baseRepository, '/investigatingDlg2/aynaudChipSeq/plots/lineplot_dlg2ChipPeaksAll.pdf', sep = ''),
       height = 8, width = 8, useDingbats = FALSE)
```

This is the same plot as above, but excluding a couple of the time points.

```{r}
##########################################################################################
#you need to run the code in the previous chunk before this because it relies on some of the objects from it
accessions = c('SRR8832669','SRR8832672','SRR8832674')
combinedPeaks = list()
for(i in 1:length(accessions)){
  macsBw = rtracklayer::import(paste(baseRepository, '/investigatingDlg2/aynaudChipSeq/macsOutput/',accessions[i],'.chr11.bw', sep = ''))
  macsOverlaps = findOverlaps(peakWindows, macsBw, ignore.strand = TRUE)
  macsCounts = as.data.frame(macsBw)[subjectHits(macsOverlaps),]
  macsCounts$peakId = peakWindows$peak
  macsCounts$indexLocation = rep(seq(1,2001,1), 5)
  macsCounts$dataset = accessions[i]
  ##
  combinedPeaks[[i]] = macsCounts
}
combinedPeaksCollapse = do.call('rbind', combinedPeaks)


##now try making the plot again
ggplot(combinedPeaksCollapse, aes(indexLocation, score)) +
  geom_path(color = brewer.pal(3,'Blues')[3], linewidth = 0.5) +
  scale_y_continuous(limits = c(0,6), breaks = seq(0,8,2)) +
  scale_x_continuous(limits = c(0,2005), breaks = seq(0,2000,1000)) +
  labs(x = 'Peak position', y = 'Bins per million', title = 'EWS-FLI1 peaks in DLG2') +
  facet_wrap(~dataset + peakId, nrow = 3, ncol = 5) +
  theme_classic() +
  theme(panel.border = element_rect(linewidth = 0.5, fill = NA),
        strip.background = element_blank(),
        strip.text.x = element_blank(),
        axis.text.x = element_blank(),
        panel.spacing = unit(0.1,'lines'))
ggsave(paste(baseRepository, '/investigatingDlg2/aynaudChipSeq/plots/lineplot_dlg2ChipPeaksSubset.pdf', sep = ''),
       height = 2, width = 2, useDingbats = FALSE)
```