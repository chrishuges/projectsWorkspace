---
title: "NB cell line data reprocessing"
author: "Christopher Hughes"
format: html
editor: visual
---

This document details the analysis of RNAseq data from NB cells from PMID: 28350380.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('RColorBrewer')
library('ggplot2')
library('tximport')
library('GenomicFeatures')
library('rtracklayer')
library('DESeq2')
library('org.Hs.eg.db')
library('ggrepel')
```

I want to set a base directory that we can use as a link to the directory where we will do most of the work. I use two directories here because the Workspace is what is pushed to GitHub and contains scripts and plot files, but the Repository is where more of the big data is stored that does not get pushed.

```{r}
##########################################################################################
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToHaifeng'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToHaifeng'
```

## Data processing

First we will need to create a transcriptome database we can use to annotate our data. We will do this using the same GTF we used in our original alignment. This can be a bit slow, but you only need to do it once.

```{r}
##########################################################################################
##read the gtf
#myGtf = rtracklayer::import.gff('C:/Users/chughes/Documents/bccrc/databases/projectEwSDlg2/baseGenomeFiles/genome.gtf')
myTxdb = makeTxDbFromGFF('C:/Users/chughes/Documents/bccrc/databases/projectEwSDlg2/baseGenomeFiles/genome.gtf')
k = keys(myTxdb, keytype = 'TXNAME')
tx2gene = AnnotationDbi::select(myTxdb, k, 'GENEID', 'TXNAME')
```

Create a table of the sample annotation details that we can use during the transcript data import.

```{r}
##########################################################################################
##I created a sample table in excel previously, read it in here
samples = read_tsv(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/sampleLayout.tsv', sep = ''),
                   show_col_types = FALSE) %>%
  dplyr::mutate(mycnStatus = factor(mycnStatus, levels = c('Amplified', 'nonAmplified')))

##assign the path to the quant files
samples$files = file.path(baseRepository, 'sequencing20220628_nbCellLineRnaSeq/quants', samples$sra, 'quant.sf')

##check if all of the quant files exist
sampleTest = samples[file.exists(samples$files),]
files = sampleTest$files
all(file.exists(files))
```

Now import the Salmon data using the files we created above.

```{r}
##########################################################################################
txi = tximport(files, 
               type = 'salmon', 
               tx2gene = tx2gene)
names(txi)
head(txi$counts)
```

I want to check the read depth across the libraries because some were quite poor in their Salmon alignment, likely due to inefficient ribo-depletion.

```{r}
##########################################################################################
##get the count data and plot it
txiCounts = txi$counts
colnames(txiCounts) = sampleTest$sra
barplot(colSums(txiCounts))

##libraries left if we keep only those with at least 40 million aligned read counts
libsToRemove = which(colSums(txiCounts) < 4e7)

##remake the sample object with these data only
samplesSub1 = sampleTest[!(sampleTest$sra %in% names(libsToRemove)),]
write.table(samplesSub1, paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_txiObjectAnnotation.tsv', sep = ''),
            quote = FALSE, col.names = TRUE, row.names = FALSE, sep = '\t')
txi = tximport(samplesSub1$files, 
               type = 'salmon', 
               tx2gene = tx2gene)
names(txi)
head(txi$counts)
barplot(colSums(txi$counts))
barplot(colSums(txi$abundance))
saveRDS(txi, paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_rawTxiObject.rds', sep = ''))
```

So some of the libraries aren't as good as others, but it isn't too crazy I think. I ended up removing libraries with fewer than 40 million counts, leaving us with 22 total samples for now. Construct the DESeq2 dataset for differential expression analysis.

```{r}
##########################################################################################
ddsTxi = DESeqDataSetFromTximport(txi,
                                  colData = samplesSub1,
                                  design = ~ mycnStatus)
##
dds = DESeq(ddsTxi)
keep = rowSums(counts(dds)) >= 50
dds = dds[keep,]
```

Perform comparisons between samples.

```{r}
##########################################################################################
datasetFirst = 'nonAmplified'
datasetSecond = 'Amplified'

##
for (i in 1:length(datasetFirst)){
  res = results(dds, contrast = c('mycnStatus', datasetFirst[i], datasetSecond))
  ens.str = substr(rownames(res), 1, 15)
  res$symbol = mapIds(org.Hs.eg.db,
                      keys=ens.str,
                      column="SYMBOL",
                      keytype="ENSEMBL",
                      multiVals="first")
  resOrdered = res[order(res$pvalue),]
  
  ##
  saveRDS(as.data.frame(resOrdered), 
          paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_deseq2_', datasetFirst[i], '-', datasetSecond, '.rds', sep = ''))
  write.csv(as.data.frame(resOrdered), 
          file = paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_deseq2_', datasetFirst[i], '-', datasetSecond, '.csv', sep = ''))

  ##
  #resLFC = lfcShrink(dds, coef = paste('treatment_',datasetFirst,'_vs_',datasetSecond, sep = ''), type = "apeglm")
  #resLFC
  #plotMA(resLFC, ylim = c(-2,2))
  rnaExp = as.data.frame(resOrdered)
  rnaExp$logPValue = -log10(rnaExp$padj)
  rnaExp$logPValueScaled = ifelse(rnaExp$logPValue > 15, 15, rnaExp$logPValue)
  rnaExp$pColors = ifelse(rnaExp$padj <= 0.001 & rnaExp$log2FoldChange >= 1, brewer.pal(3,'OrRd')[3], 
                          ifelse(rnaExp$padj <= 0.001 & rnaExp$log2FoldChange <= -1, brewer.pal(3,'Blues')[3], brewer.pal(3,'Greys')[2]))
  goi = c('GREB1','MYCN','MYO1B')
  rnaExp$pText = ifelse(rnaExp$symbol %in% goi, rnaExp$symbol, '')
  ##
  ggplot(rnaExp, aes(log2FoldChange, logPValueScaled)) +
    geom_point(size = 1, color = rnaExp$pColors, alpha = 0.75) +
    labs(x = paste('log2(',datasetFirst[i],' - ',datasetSecond,')', sep = ''), y = '-log10(Adjusted p-value)', title = paste(datasetFirst[i],' vs ',datasetSecond, sep='')) +
    geom_text_repel(label = rnaExp$pText, nudge_x = -3, nudge_y = -150, max.overlaps = 15000) +
    #scale_x_continuous(limits = c(-10,10), breaks = seq(-10,10,2)) +
    #scale_y_continuous(limits = c(0,300), breaks = seq(0,500,50)) +
    geom_vline(xintercept = c(-1,1), linetype = 'dashed') +
    geom_hline(yintercept = -log10(0.001), linetype = 'dashed') +
    theme_classic()
  ##
  ggsave(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/scatter_deseq2_', datasetFirst[i], '-', datasetSecond, '.pdf', sep = ''),
         height = 2, width = 2, useDingbats = FALSE)
}
```

What if we bring in our mycN shrna data and overlay these two sets?

```{r}
##########################################################################################
mycAmp = tibble(readRDS(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_deseq2_nonAmplified-Amplified.rds', sep = ''))) %>%
  dplyr::select(symbol, log2FoldChange, pvalue) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::rename(amp_log2FoldChange = log2FoldChange, amp_pvalue = pvalue)
mycSh = tibble(readRDS(paste(baseRepository, '/sequencing20220711_nbCellLineMycNPmid29379199/dataset_deseq2_total_kd_24h-kd_0h.rds', sep = ''))) %>%
  dplyr::select(symbol, log2FoldChange, pvalue) %>%
  dplyr::filter(!is.na(symbol)) %>%
  dplyr::rename(sh_log2FoldChange = log2FoldChange, sh_pvalue = pvalue)
                 
##combine the files
goi = c('MYCN','GREB1','MYO1B')
mycData = mycAmp %>%
  dplyr::inner_join(mycSh) %>%
  dplyr::mutate(amp_log2FoldChange = ifelse(amp_log2FoldChange >= 10, 10, 
                                            ifelse(sh_log2FoldChange <= -10, -10, amp_log2FoldChange))) %>%
  dplyr::mutate(sh_log2FoldChange = ifelse(sh_log2FoldChange >= 10, 10, 
                                           ifelse(sh_log2FoldChange <= -10, -10, sh_log2FoldChange))) %>%
  dplyr::mutate(pText = ifelse(symbol %in% goi, symbol, '')) %>%
  dplyr::mutate(pColor = ifelse(abs(amp_log2FoldChange) > 1 & abs(sh_log2FoldChange) < 1, 'red', 'grey'))

##plot the data
ggplot(mycData, aes(amp_log2FoldChange, sh_log2FoldChange)) +
  geom_point(size = 1, color = mycData$pColor) +
  geom_text_repel(label = mycData$pText, max.overlaps = 10000, nudge_x = -3) +
  labs(x = 'log2(Fold change amplified vs. non-amplified)', y = 'log2(Fold change MYC-N shRNA 24h vs. 0h)', title = 'MYC-N targets in NB') +
  theme_classic()
```

Done for now.

## Session info

```{r}
##########################################################################################
sessionInfo()
```
