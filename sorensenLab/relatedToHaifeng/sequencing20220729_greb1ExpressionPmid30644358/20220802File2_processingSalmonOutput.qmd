---
title: "MYC-N shRNA data reprocessing"
author: "Christopher Hughes"
format: html
editor: visual
---

This document details the analysis of RNAseq data from LNCaP prostate cancer cells treated with an shRNA against GREB1 from PMID: 30644358

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('RColorBrewer')
library('ggplot2')
library('tximport')
library('GenomicFeatures')
library('rtracklayer')
library('DESeq2')
library('org.Hs.eg.db')
library('ggrepel')
```

I want to set a base directory that we can use as a link to the directory where we will do most of the work. I use two directories here because the Workspace is what is pushed to GitHub and contains scripts and plot files, but the Repository is where more of the big data is stored that does not get pushed.

```{r}
##########################################################################################
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToHaifeng'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToHaifeng'
```

## Data processing

First we will need to create a transcriptome database we can use to annotate our data. We will do this using the same GTF we used in our original alignment. This can be a bit slow, but you only need to do it once.

```{r}
##########################################################################################
##read the gtf
#myGtf = rtracklayer::import.gff('C:/Users/chughes/Documents/bccrc/databases/projectEwSDlg2/baseGenomeFiles/genome.gtf')
myTxdb = makeTxDbFromGFF('C:/Users/chughes/Documents/bccrc/databases/projectEwSDlg2/baseGenomeFiles/genome.gtf')
k = keys(myTxdb, keytype = 'TXNAME')
tx2gene = AnnotationDbi::select(myTxdb, k, 'GENEID', 'TXNAME')
```

Create a table of the sample annotation details that we can use during the transcript data import.

```{r}
##########################################################################################
##I created a sample table in excel previously, read it in here
samples = read_tsv(paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/sampleLayout.tsv', sep = ''),
                   show_col_types = FALSE)

##assign the path to the quant files
samples$files = file.path(baseRepository, 'sequencing20220729_greb1ExpressionPmid30644358/quants', samples$sra, 'quant.sf')

##check if all of the quant files exist
files = samples$files
all(file.exists(files))

##we are only interested in the shGREB1 samples for now, so just take these
samplesToUse = samples[c(5:7,11:13),]
filesToUse = files[c(5:7,11:13)]
```

Now import the Salmon data using the files we created above.

```{r}
##########################################################################################
txi = tximport(filesToUse, 
               type = 'salmon', 
               tx2gene = tx2gene)
names(txi)
head(txi$counts)

##write these raw count data
rnaCounts = as.data.frame(txi$counts)
rnaCounts$ensg = row.names(rnaCounts)
ens.str = substr(rownames(rnaCounts), 1, 15)
rnaCounts$symbol = mapIds(org.Hs.eg.db,
                      keys=ens.str,
                      column="SYMBOL",
                      keytype="ENSEMBL",
                      multiVals="first")
colnames(rnaCounts)[1:6] = samplesToUse$sampleName
saveRDS(rnaCounts, paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/dataset_salmonRawRnaCounts.rds',sep = ''))
write.table(rnaCounts, paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/dataset_salmonRawRnaCounts.tsv',sep = ''),
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

##write these raw abundance data
rnaCounts = as.data.frame(txi$abundance)
rnaCounts$ensg = row.names(rnaCounts)
ens.str = substr(rownames(rnaCounts), 1, 15)
rnaCounts$symbol = mapIds(org.Hs.eg.db,
                      keys=ens.str,
                      column="SYMBOL",
                      keytype="ENSEMBL",
                      multiVals="first")
colnames(rnaCounts)[1:6] = samplesToUse$sampleName
saveRDS(rnaCounts, paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/dataset_salmonRawAbundance.rds',sep = ''))
write.table(rnaCounts, paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/dataset_salmonRawAbundance.tsv',sep = ''),
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')

##quick check of DTU for MYO1B
txi = tximport(filesToUse, 
               type = 'salmon', 
               tx2gene = tx2gene,
               countsFromAbundance = 'dtuScaledTPM',
               txOut = TRUE)
names(txi)
head(txi$counts)
x = as.data.frame(txi$abundance)
x$TXNAME = row.names(x)
x = dplyr::left_join(x, tx2gene)
ens.str = substr(x$GENEID, 1, 15)
x$symbol = mapIds(org.Hs.eg.db,
                      keys=ens.str,
                      column="SYMBOL",
                      keytype="ENSEMBL",
                      multiVals="first")
```

Construct the DESeq2 dataset for differential expression analysis.

```{r}
##########################################################################################
ddsTxi = DESeqDataSetFromTximport(txi,
                                  colData = samplesToUse,
                                  design = ~ treatment)
##
dds = DESeq(ddsTxi)
keep = rowSums(counts(dds)) >= 50
dds = dds[keep,]
```

Perform comparisons between samples.

```{r}
##########################################################################################
datasetFirst = 'shGreb'
datasetSecond = 'dmso'

##
for (i in 1:length(datasetFirst)){
  res = results(dds, contrast = c('treatment', datasetFirst[i], datasetSecond))
  ens.str = substr(rownames(res), 1, 15)
  res$symbol = mapIds(org.Hs.eg.db,
                      keys=ens.str,
                      column="SYMBOL",
                      keytype="ENSEMBL",
                      multiVals="first")
  resOrdered = res[order(res$pvalue),]
  
  ##
  saveRDS(as.data.frame(resOrdered), 
          paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/dataset_deseq2_total_', datasetFirst[i], '-', datasetSecond, '.rds', sep = ''))
  write.csv(as.data.frame(resOrdered), 
          file = paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/dataset_deseq2_total_', datasetFirst[i], '-', datasetSecond, '.csv', sep = ''))

  ##
  #resLFC = lfcShrink(dds, coef = paste('treatment_',datasetFirst,'_vs_',datasetSecond, sep = ''), type = "apeglm")
  #resLFC
  #plotMA(resLFC, ylim = c(-2,2))
  rnaExp = as.data.frame(resOrdered)
  rnaExp$logPValue = -log10(rnaExp$padj)
  rnaExp$logPValueScaled = ifelse(rnaExp$logPValue > 100, 100, rnaExp$logPValue)
  rnaExp$pColors = ifelse(rnaExp$padj <= 0.001 & rnaExp$log2FoldChange >= 1, brewer.pal(3,'OrRd')[3], 
                          ifelse(rnaExp$padj <= 0.001 & rnaExp$log2FoldChange <= -1, brewer.pal(3,'Blues')[3], brewer.pal(3,'Greys')[2]))
  goi = c('GREB1','MYCN','MYO1B')
  rnaExp$pText = ifelse(rnaExp$symbol %in% goi, rnaExp$symbol, '')
  ##
  ggplot(rnaExp, aes(log2FoldChange, logPValueScaled)) +
    geom_point(size = 1, color = rnaExp$pColors, alpha = 0.75) +
    labs(x = paste('log2(',datasetFirst[i],' - ',datasetSecond,')', sep = ''), y = '-log10(Adjusted p-value)', title = paste(datasetFirst[i],' vs ',datasetSecond, sep='')) +
    geom_text_repel(label = rnaExp$pText, size = 2, nudge_x = -5, nudge_y = -50, max.overlaps = 15000) +
    scale_x_continuous(limits = c(-6,6), breaks = seq(-8,8,2)) +
    scale_y_continuous(limits = c(0,100), breaks = seq(0,500,50)) +
    geom_vline(xintercept = c(-1,1), linetype = 'dashed') +
    geom_hline(yintercept = -log10(0.001), linetype = 'dashed') +
    theme_classic()
  ##
  ggsave(paste(baseRepository, '/sequencing20220729_greb1ExpressionPmid30644358/scatter_deseq2_', datasetFirst[i], '-', datasetSecond, '.pdf', sep = ''),
         height = 2, width = 2, useDingbats = FALSE)
}
```

Done for now.

### Session info

```{r}
sessionInfo()
```
