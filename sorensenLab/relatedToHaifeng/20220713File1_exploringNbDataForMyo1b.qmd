---
title: "MYO1B questions"
author: "Christopher Hughes"
format: html
---

This document details attempting to address questions related to MYO1B in NB.

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('RColorBrewer')
library('org.Hs.eg.db')
library('ggplot2')
library('ggrepel')
library('rtracklayer')
```

I want to set a base directory that we can use as a link to the directory where we will do most of the work. I use two directories here because the Workspace is what is pushed to GitHub and contains scripts and plot files, but the Repository is where more of the big data is stored that does not get pushed.

```{r}
##########################################################################################
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToHaifeng'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToHaifeng'
```

## Data processing

### MYO1B is high in NB

I want to illustrate that MYO1B expression is high in NB cells. We can do this using cell line RNAseq data from PMID: 28350380. We downloaded and re-processed these data against an updated genome annotation.

```{r}
##########################################################################################
##read the transcriptome object derived from the rna-seq data and its annotation
rnaAnnotation = read_tsv(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_txiObjectAnnotation.tsv', sep = ''),
                         show_col_types = FALSE)
rna = readRDS(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/dataset_rawTxiObject.rds', sep = ''))
rnaAbundance = rna$abundance


##want to make an object that is better for plotting
myo1b = tibble(as.data.frame(rnaAbundance)) %>%
  dplyr::mutate(ensg = row.names(rnaAbundance))
colnames(myo1b)[1:22] = rnaAnnotation$sra
ens.str = substr(myo1b$ensg, 1, 15)
myo1b$symbol = mapIds(org.Hs.eg.db,
                      keys = ens.str,
                      column = "SYMBOL",
                      keytype = "ENSEMBL",
                      multiVals = "first")
myo1b = myo1b %>%
  dplyr::filter(!is.na(symbol)) %>%
  tidyr::pivot_longer(cols = SRR4787012:SRR4787044, names_to = 'sra', values_to = 'abundance') %>%
  dplyr::left_join(rnaAnnotation[,1:3])


##now we can plot these data
##ensembl for MYO1B is ENSG00000128641
genesOfInterest = c('MYO1B','GREB1','MYCN')
for (i in 1:length(genesOfInterest)){
  goi = myo1b %>%
    dplyr::filter(symbol == genesOfInterest[i]) %>%
    dplyr::arrange(-abundance) %>%
    dplyr::mutate(sampleName = factor(sampleName, levels = sampleName))
  
  #
  ggplot(goi, aes(sampleName, log2(abundance + 1), color = mycnStatus)) +
    geom_point(size = 2) +
    scale_y_continuous(limits = c(0,10)) +
    labs(title = paste(genesOfInterest[i], 'RNA abundance')) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1),
          legend.position = 'none')
  #
  ggsave(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/scatter_', genesOfInterest[i], '_inNbCellLines.pdf', sep = ''),
         height = 4, width = 4, useDingbats = FALSE)
}


##show the invidual plots
##mycN
  goi = myo1b %>%
    dplyr::filter(symbol == 'MYCN') %>%
    dplyr::arrange(-abundance) %>%
    dplyr::mutate(sampleName = factor(sampleName, levels = sampleName))
  #
  ggplot(goi, aes(sampleName, log2(abundance + 1), fill = mycnStatus)) +
    geom_bar(stat = 'identity') +
    scale_y_continuous(limits = c(0,10)) +
    labs(title = 'MYCN RNA abundance') +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

  ##myo1b
  goi = myo1b %>%
    dplyr::filter(symbol == 'MYO1B') %>%
    dplyr::arrange(-abundance) %>%
    dplyr::mutate(sampleName = factor(sampleName, levels = sampleName))
  #
  ggplot(goi, aes(sampleName, log2(abundance + 1), fill = mycnStatus)) +
    geom_bar(stat = 'identity') +
    scale_y_continuous(limits = c(0,10)) +
    labs(title = 'MYO1B RNA abundance') +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  ##greb1
  goi = myo1b %>%
    dplyr::filter(symbol == 'GREB1') %>%
    dplyr::arrange(-abundance) %>%
    dplyr::mutate(sampleName = factor(sampleName, levels = sampleName))
  #
  ggplot(goi, aes(sampleName, log2(abundance + 1), fill = mycnStatus)) +
    geom_bar(stat = 'identity') +
    scale_y_continuous(limits = c(0,10)) +
    labs(title = 'GREB1 RNA abundance') +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

So, it is pretty clear from these data that MYO1B is highly expressed in NB, and that this doesn't appear to depend on whether the cell is MYCN amplified or not. But, this doesn't mean that its expression isn't regulated by MYCN in general. One last thing to check here is if we see something different if we consider protein data. For this, I will use some recently published proteomics data from PMID: 35839778.

```{r}
##########################################################################################
##read in the cell line annotation data
cellInfo = read_csv(paste(baseRepository, '/proteomics20220728_cancerCellLineMapsPmid35839778/model_list_20220628.csv', sep = ''), show_col_types = FALSE) %>%
  dplyr::select(model_id:gender) %>%
  dplyr::filter(cancer_type_detail == 'Neuroblastoma')

##get mycn status from our other annotation
rnaAnnotation = read_tsv(paste(baseRepository, '/sequencing20220628_nbCellLineRnaSeq/sampleLayout.tsv', sep = ''),
                         show_col_types = FALSE) %>%
  dplyr::rename(model_name = sampleName) %>%
  dplyr::mutate(model_name = ifelse(model_name == 'IMR-05', 'IMR-5', model_name)) %>%
  dplyr::mutate(model_name = ifelse(model_name == 'SK-N-BE(2)', 'SK-N-BE-2', model_name)) %>%
  dplyr::mutate(model_name = ifelse(model_name == 'NB-1', 'NB1', model_name)) %>%
  dplyr::mutate(model_name = ifelse(model_name == 'NB-69', 'NB69', model_name)) %>%
  dplyr::mutate(model_name = ifelse(model_name == 'LA-N-6', 'LAN-6', model_name)) 

##join the data together
nbCells = cellInfo %>%
  dplyr::left_join(rnaAnnotation) %>%
  dplyr::filter(!is.na(mycnStatus)) %>%
  dplyr::select(model_name, mycnStatus)
#we don't get annotation for everything, but we probably still have enough for plotting purposes

##read in the protein data
genesOfInterest = c('MYO1B','GREB1','MYCN')
proData = read_csv(paste(baseRepository, '/proteomics20220728_cancerCellLineMapsPmid35839778/proteomics_all_20220713.csv', sep = ''), show_col_types = FALSE) %>%
  dplyr::filter(symbol %in% genesOfInterest) %>%
  dplyr::right_join(nbCells)

##plot the data
##mycN
  goi = proData %>%
    dplyr::filter(symbol == 'MYCN') %>%
    dplyr::arrange(-protein_intensity) %>%
    dplyr::mutate(model_name = factor(model_name, levels = model_name))
  #
  ggplot(goi, aes(model_name, protein_intensity, fill = mycnStatus)) +
    geom_bar(stat = 'identity') +
    scale_y_continuous(limits = c(0,10)) +
    labs(title = 'MYCN protein abundance') +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

##myo1b
  goi = proData %>%
    dplyr::filter(symbol == 'MYO1B') %>%
    dplyr::arrange(-protein_intensity) %>%
    dplyr::mutate(model_name = factor(model_name, levels = model_name))
  #
  ggplot(goi, aes(model_name, protein_intensity, fill = mycnStatus)) +
    geom_bar(stat = 'identity') +
    scale_y_continuous(limits = c(0,10)) +
    labs(title = 'MYO1B protein abundance') +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

It seems this data is maybe not the best. They don't get great detection of MYCN, so it is hard to look at whether it is expressed different across the different cell types. I guess it is good they only see MYCN in the amplified cells, but yeah, not super useful.  

### MYO1B RNA expression is not controlled by MYCN

We can use some shRNA data we re-processed for this purpose, from PMID: 29379199. The best way to show this is likely to have MYCN and MYO1B expression across the different shRNA conditions.

```{r}
##########################################################################################
##read in the processed rnaseq data
rnaFiles = list.files(paste(baseRepository, '/sequencing20220711_nbCellLineMycNPmid29379199',sep = ''), pattern = '*.rds', full.names = TRUE)

##process into a single object
rnaData = tibble()
for (i in 1:length(rnaFiles)){
  rnaTemp = readRDS(rnaFiles[i]) %>%
    as_tibble() %>%
    dplyr::mutate(timepoint = sub('.*total_kd_(.*)h\\-kd_0h\\.rds', '\\1', rnaFiles[i]))
  #
  rnaData = rbind(rnaData, rnaTemp)
}
rnaData$timepoint = factor(rnaData$timepoint, levels = c(2,4,6,8,16,24))

##plot the data
genesOfInterest = c('MYO1B','GREB1','MYCN')
goiPlotData = rnaData %>%
  dplyr::filter(symbol %in% genesOfInterest) %>%
  dplyr::mutate(symbol = factor(symbol, levels = c('MYCN','MYO1B','GREB1')))
ggplot(goiPlotData, aes(symbol, log2FoldChange, fill = timepoint)) +
  geom_bar(stat = 'identity', position = position_dodge())
```

So MYO1B and GREB1 do appear to change a bit, but it is in the opposite direction of what is potentially expected. This is good. I think we can safely say that MYO1B is not regulated by MYCN at least based on expression data.

## MYO1B is not a target of MYCN in ChIP data

```{r}
##########################################################################################
##the first thing we need is a GTF file to extract our gene regions
genesOfInterest = c('MYO1B','GREB1','MYCN','NPM1')
totalGtf = as.data.frame(rtracklayer::import.gff('D:/databases/projectEwsDlg2/baseGenomeFiles/genome.gtf')) %>%
  dplyr::filter(gene_name %in% genesOfInterest) %>%
  dplyr::filter(type == 'gene')
totalGtf

##get the regions, they are all positive strand
myoStart = totalGtf[totalGtf$gene_name == 'MYO1B', 'start'] - 1e4
myoEnd = totalGtf[totalGtf$gene_name == 'MYO1B', 'start'] + 1e4
grebStart = totalGtf[totalGtf$gene_name == 'GREB1', 'start'] - 1e4
grebEnd = totalGtf[totalGtf$gene_name == 'GREB1', 'start'] + 1e4
npmStart = totalGtf[totalGtf$gene_name == 'NPM1', 'start'] - 1e4
npmEnd = totalGtf[totalGtf$gene_name == 'NPM1', 'start'] + 1e4
```

Now that we have the coordinates of our genes of interest, we can see if there are any peaks in these regions.

```{r}
##########################################################################################
##read in the peak data
#SHEP21 - this is a tetOFF MYCN line
#SRR3356397 0h
#SRR3356408 2h
#SRR3356404 24h

#SHEP - this is a tetON MYCN line
#SRR5441928 0h
#SRR5441931 2h
#SRR5441934 6h

sraData = tibble('accession' = c('SRR3356397','SRR3356408','SRR3356404','SRR5441928','SRR5441931','SRR5441934'),
                 'cellLine' = c('SHEP21','SHEP21','SHEP21','SHEP','SHEP','SHEP'),
                 'timepoint' = c(0,2,24,0,2,6))

##look first for MYO1B in these data
peakData = tibble()
for (i in 1:nrow(sraData)){
  peakTemp = read_tsv(paste(baseRepository, '/sequencing20220711_nbCellLineMycNPmid29379199/chipSeq/',sraData$accession[i],'_peaks.xls', sep = ''),
                      skip = 30,
                      show_col_types = FALSE,
                      col_names = c('chr','start','end','length','abs_summit','pileup','logPValue','fold_enrichment','logQValue','name')) %>%
    dplyr::filter(grepl('chr2', chr)) %>%
    dplyr::filter(start > myoStart & end < myoEnd) %>%
    dplyr::mutate(midPoint = start + round(length / 2, 0),
                  cellLine = sraData$cellLine[i],
                  timepoint = sraData$timePoint[i]) %>%
    dplyr::filter(fold_enrichment >= 10)
  #
  peakData = rbind(peakData, peakTemp)
}


##also want to do GREB1
peakData = tibble()
for (i in 1:nrow(sraData)){
  peakTemp = read_tsv(paste(baseRepository, '/sequencing20220711_nbCellLineMycNPmid29379199/chipSeq/',sraData$accession[i],'_peaks.xls', sep = ''),
                      skip = 30,
                      show_col_types = FALSE,
                      col_names = c('chr','start','end','length','abs_summit','pileup','logPValue','fold_enrichment','logQValue','name')) %>%
    dplyr::filter(grepl('chr2', chr)) %>%
    dplyr::filter(start > myoStart & end < myoEnd) %>%
    dplyr::mutate(midPoint = start + round(length / 2, 0),
                  cellLine = sraData$cellLine[i],
                  timepoint = sraData$timePoint[i]) %>%
    dplyr::filter(fold_enrichment >= 10)
  #
  peakData = rbind(peakData, peakTemp)
}



##positive control gene as a sanity check, in the paper they use NPM1
peakData = tibble()
for (i in 1:nrow(sraData)){
  peakTemp = read_tsv(paste(baseRepository, '/sequencing20220711_nbCellLineMycNPmid29379199/chipSeq/',sraData$accession[i],'_peaks.xls', sep = ''),
                      skip = 30,
                      show_col_types = FALSE,
                      col_names = c('chr','start','end','length','abs_summit','pileup','logPValue','fold_enrichment','logQValue','name')) %>%
    dplyr::filter(grepl('chr2', chr)) %>%
    dplyr::filter(start > myoStart & end < myoEnd) %>%
    dplyr::mutate(midPoint = start + round(length / 2, 0),
                  cellLine = sraData$cellLine[i],
                  timepoint = sraData$timePoint[i]) %>%
    dplyr::filter(fold_enrichment >= 10)
  #
  peakData = rbind(peakData, peakTemp)
}
```
















