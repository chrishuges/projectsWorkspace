---
title: "Analysis of A673 EWS-FLI1 RNAseq Timecourse"
author: "Christopher Hughes"
abstract: "This document details analysis of RNAseq data acquired to examine the impact of EWS-FLI1 expression in A673 EwS cells grown in 2D adherent culture conditions. The raw fastq data has already been processed and aligned, so here we will work with the outputs for quantification."
format: html
editor: visual
code-fold: false
---

```{r}
#| label: load-packages and set directories
#| include: false

##########################################################################################
#packages
library('tidyverse')
library('RColorBrewer')
library('ggplot2')
library('tximport')
library('GenomicFeatures')
library('DESeq2')
library('org.Hs.eg.db')
library('ggrepel')

##########################################################################################
#directories
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToDlg2'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToDlg2'
#generalDatasets = 'C:/Users/chris/OneDrive/Documents/bccrc/projectsRepository/generalDatasets'
#baseWorkspace = 'C:/Users/chris/OneDrive/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToYbx1'
#baseRepository = 'C:/Users/chris/OneDrive/Documents/bccrc/projectsRepository/sorensenLab/relatedToYbx1'
```

#### Data processing

Read in the sample annotation details and make the txdb that we can use later on for annotation gene identifiers.

```{r}
#| label: read input data
#| warning: false


##########################################################################################
#read a table containing the sample information for our RNAseq runs
samples = read_tsv(paste(baseRepository, '/sequencing20210421_a673TimecourseRnaSeqOutput/sampleInfo.txt', sep = ''))
samples

#use the sample info to build a file list
files = file.path(baseRepository, 'sequencing20210421_a673TimecourseRnaSeqOutput', paste(samples$barcode, '_', samples$batch, '_quant', sep = ''), 'quant.sf')
all(file.exists(files))
```

For Salmon analysis, I am generally following the documentation found [here](http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) and [here](http://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html). When we import our data, we want a table that allows us to link gene and transcript identifiers. For this we use the GTF associated with our database files that we used during the alignment process. 

```{r}
#| label: build txdb
#| warning: false

##########################################################################################
#build the txdb from the gtf file
myTxdb = makeTxDbFromGFF('D:/databases/projectEwsDlg2/baseGenomeFiles/genome.gtf')
k = keys(myTxdb, keytype = 'TXNAME')
tx2gene = AnnotationDbi::select(myTxdb, k, 'GENEID', 'TXNAME')
head(tx2gene)
```

Read in the Salmon data.

```{r}
#| label: read salmon data
#| warning: false

##########################################################################################
#read the salmon data
txi = tximport(files, 
               type = 'salmon', 
               tx2gene = tx2gene)
names(txi)
head(txi$counts)
```

```{r}
#| label: perform deseq analysis
#| warning: false

##########################################################################################
#perform the deseq analysis
ddsTxi = DESeqDataSetFromTximport(txi,
                                  colData = samples,
                                  design = ~ sampleName)
dds = DESeq(ddsTxi)
keep = rowSums(counts(dds)) >= 10
dds = dds[keep,]
```

Extract the DESeq data and plot for the different comparisons of interest.

```{r}
#| label: extract and plot comparisons
#| warning: false


##########################################################################################
#parse the deseq data - change the first two values to get different comparisons
daysToCompare = c('day0','day9','day10','day11','day14','day17','day22')
for (i in 1:length(daysToCompare)){
  datasetFirst = daysToCompare[i]
  datasetSecond = 'day7'
  res = results(dds, contrast = c('sampleName', datasetFirst, datasetSecond))
  ens.str = substr(rownames(res), 1, 15)
  res$symbol = mapIds(org.Hs.eg.db,
                      keys=ens.str,
                      column="SYMBOL",
                      keytype="ENSEMBL",
                      multiVals="first")
  resOrdered = res[order(res$pvalue),]
  
  #save the data
  saveRDS(as.data.frame(resOrdered), 
          paste(baseRepository, '/sequencing20210421_a673TimecourseRnaSeqOutput/dataset_deseq2_', datasetFirst, '-', datasetSecond, '.rds', sep = ''))
  write.csv(as.data.frame(resOrdered), 
            file = paste(baseRepository, '/sequencing20210421_a673TimecourseRnaSeqOutput/dataset_deseq2_', datasetFirst, '-', datasetSecond, '.csv', sep = ''))
  
  
  ##########################################################################################
  #assign colors based on fold change and p-values
  rnaExp = as.data.frame(resOrdered)
  rnaExp$logPValue = -log10(rnaExp$padj)
  rnaExp$logPValueScaled = ifelse(rnaExp$logPValue > 300, 300, rnaExp$logPValue)
  rnaExp$pColors = ifelse(rnaExp$padj <= 0.001 & rnaExp$log2FoldChange >= 1, brewer.pal(3,'OrRd')[3], 
                          ifelse(rnaExp$padj <= 0.001 & rnaExp$log2FoldChange <= -1, brewer.pal(3,'Blues')[3], brewer.pal(3,'Greys')[2]))
  
  #assign text labels to specific genes of interest
  goi = c('DLG2','LOX','PRKCB')
  rnaExp$pText = ifelse(rnaExp$symbol %in% goi, rnaExp$symbol, '')

  #create the plot and save it
  ggplot(rnaExp, aes(log2FoldChange, logPValueScaled)) +
    geom_point(size = 1, color = rnaExp$pColors, alpha = 0.75) +
    labs(x = paste('log2(',datasetFirst,' - ',datasetSecond,')', sep = ''), y = '-log10(Adjusted p-value)', title = paste(datasetFirst,' vs ',datasetSecond, sep='')) +
    geom_text_repel(label = rnaExp$pText, nudge_x = -3, nudge_y = -150, max.overlaps = 15000) +
    scale_x_continuous(limits = c(-10,10), breaks = seq(-10,10,2)) +
    scale_y_continuous(limits = c(0,300), breaks = seq(0,500,50)) +
    geom_vline(xintercept = c(-1,1), linetype = 'dashed') +
    geom_hline(yintercept = -log10(0.001), linetype = 'dashed') +
    theme_classic()
  ggsave(paste(baseRepository, '/sequencing20210421_a673TimecourseRnaSeqOutput/scatter_deseq2_', datasetFirst, '-', datasetSecond, '.pdf', sep = ''),
         height = 2, width = 2, useDingbats = FALSE)
}
```





