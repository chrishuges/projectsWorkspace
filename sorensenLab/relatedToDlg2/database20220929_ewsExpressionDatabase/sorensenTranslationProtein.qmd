---
title: "sorensenTranslationProtein"
author: "Christopher Hughes"
format: html
---

## Setting up the environment

These are packages you will need for this notebook. For exact versions used, please refer to the session info at the bottom of this notebook.

```{r}
#| message: false
#| warning: false
##########################################################################################
library('tidyverse')
library('diann')
```

I want to set a base directory that we can use as a link to the directory where we will do most of the work. I use two directories here because the Workspace is what is pushed to GitHub and contains scripts and plot files, but the Repository is where more of the big data is stored that does not get pushed.

```{r}
##########################################################################################
generalDatasets = 'C:/Users/chughes/Documents/bccrc/projectsRepository/generalDatasets'
baseWorkspace = 'C:/Users/chughes/Documents/bccrc/projectsWorkspace/sorensenLab/relatedToDlg2'
baseRepository = 'C:/Users/chughes/Documents/bccrc/projectsRepository/sorensenLab/relatedToDlg2'
```

## Data processing

Basically all we have to do here is read in the peptide tables using the [DiaNN R package](https://github.com/vdemichev/diann-rpackage), and it will process them using the MaxLFQ algorithm.

```{r}
##########################################################################################
##read in the diaNN data...you have to use double slashes here for some reason
pepHighRaw = diann_load('C:\\Users\\chughes\\Documents\\bccrc\\projectsRepository\\sorensenLab\\relatedToDlg2\\database20220929_ewsExpressionDatabase\\sorensenTranslationProtein\\highMass_report.tsv')
pepLowRaw = diann_load('C:\\Users\\chughes\\Documents\\bccrc\\projectsRepository\\sorensenLab\\relatedToDlg2\\database20220929_ewsExpressionDatabase\\sorensenTranslationProtein\\lowMass_report.tsv')

##low mass processing, LFQ at peptide level
pepLowLfq = diann_maxlfq(pepLowRaw[pepLowRaw$Q.Value <= 0.01 & pepLowRaw$Lib.PG.Q.Value <= 0.01 & pepLowRaw$Proteotypic == 1,], 
                       group.header="Stripped.Sequence", 
                       id.header = "Precursor.Id", 
                       quantity.header = "Precursor.Normalised")
gene.names = pepLowRaw$Genes[match(rownames(pepLowLfq), pepLowRaw$Stripped.Sequence)]
accession.names = pepLowRaw$Protein.Group[match(rownames(pepLowLfq), pepLowRaw$Stripped.Sequence)]
pepLowLfqAnno = data.frame('symbol' = gene.names,
                           'accession' = accession.names,
                           pepLowLfq)
sampleNames = sub('.*Polysome_(.*)_diaLow+\\.raw','\\1',colnames(pepLowLfqAnno))
colnames(pepLowLfqAnno) = c(sampleNames)
pepLowLfqReorder = as.data.frame(pepLowLfqAnno[,c('symbol','accession',
                                               'noDox_rep1','noDox_rep2','noDox_rep3',
                                               'yesDox_rep1','yesDox_rep2','yesDox_rep3')])
pepLowLfqReorder$scanSet = 'lowMass'
pepLowLfqReorder$numPeps = 1
pepLowFinal = pepLowLfqReorder %>%
  dplyr::filter(!is.na(symbol)) %>%
  as_tibble()


##high mass processing, LFQ at peptide level
pepHighLfq = diann_maxlfq(pepHighRaw[pepHighRaw$Q.Value <= 0.01 & pepHighRaw$Lib.PG.Q.Value <= 0.01 & pepHighRaw$Proteotypic == 1,], 
                       group.header="Stripped.Sequence", 
                       id.header = "Precursor.Id", 
                       quantity.header = "Precursor.Normalised")
gene.names = pepHighRaw$Genes[match(rownames(pepHighLfq), pepHighRaw$Stripped.Sequence)]
accession.names = pepHighRaw$Protein.Group[match(rownames(pepHighLfq), pepHighRaw$Stripped.Sequence)]
pepHighLfqAnno = data.frame('symbol' = gene.names,
                           'accession' = accession.names,
                           pepHighLfq)
sampleNames = sub('.*Polysome_(.*)_diaHigh+\\.raw','\\1',colnames(pepLowLfqAnno))
colnames(pepHighLfqAnno) = c(sampleNames)
pepHighLfqReorder = as.data.frame(pepHighLfqAnno[,c('symbol','accession',
                                               'noDox_rep1','noDox_rep2','noDox_rep3',
                                               'yesDox_rep1','yesDox_rep2','yesDox_rep3')])
pepHighLfqReorder$scanSet = 'highMass'
pepHighLfqReorder$numPeps = 1
pepHighFinal = pepHighLfqReorder %>%
  dplyr::filter(!is.na(symbol)) %>%
  as_tibble()
```

Now we have a combined peptide table that we can work with. We can roll these peptide values up into proteins and check a couple of control genes we know should be changing.

```{r}
##########################################################################################
##read in the peptide data and make a protein set
pepData = rbind(pepLowFinal, pepHighFinal)
pepData$samples123 = rowSums(is.na(pepData[,3:5]))
pepData$samples456 = rowSums(is.na(pepData[,6:8]))
pepData[,3:8] = log2(pepData[,3:8])
pepData = dplyr::filter(pepData, symbol != '') %>%
  dplyr::filter(samples123 == 0 | samples456 == 0) %>%
  dplyr::group_by(symbol, accession) %>%
  dplyr::summarise(across(noDox_rep1:yesDox_rep3, median, na.rm = TRUE), numPeps = sum(numPeps, na.rm = TRUE))

pepData$meanSamples123 = rowMeans(pepData[,3:5], na.rm = TRUE)
pepData$meanSamples456 = rowMeans(pepData[,6:8], na.rm = TRUE)
pepData$sorensenTranslationProtein = pepData$meanSamples123 - pepData$meanSamples456
proFinal = dplyr::select(pepData, symbol, accession, sorensenTranslationProtein)

##save these data
saveRDS(proFinal, paste(baseRepository, '/database20220929_ewsExpressionDatabase/sorensenTranslationProtein/dataset_sorensenTranslationProtein.rds',sep = ''))
write.table(proFinal, paste(baseRepository, '/database20220929_ewsExpressionDatabase/sorensenTranslationProtein/dataset_sorensenTranslationProtein.tsv',sep = ''),
            col.names = TRUE, row.names = FALSE, quote = FALSE, sep = '\t')
```

Finish up.

### Session info

```{r}
##########################################################################################
sessionInfo()
```
